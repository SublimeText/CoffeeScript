%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html
# CoffeeScript Syntax: version 1
name: CoffeeScript
scope: source.coffee
version: 2

file_extensions:
  - coffee
  - Cakefile
  - coffee.erb
  - cson
  - cjsx

first_line_match: |-
  (?xi:
    ^ \#! .* \b(coffee(-script)?)\b                      # shebang
  | ^ \s* \# .*? -\*- .*? \bcoffee(-script)?\b .*? -\*-  # editorconfig
  )

##############################################################################

contexts:

  main:
    - meta_include_prototype: false
    - match: ''
      push: [script, shebang]

  script:
    - include: classes
    - include: functions
    - include: keywords
    - include: jsx-tags
    - include: expressions

  expressions:
    - include: comments
    - include: constants
    - include: function-calls
    - include: patterns
    - include: operators
    - include: punctuations
    - include: backtick-quoted-strings
    - include: triple-double-quoted-strings
    - include: triple-single-quoted-strings
    - include: double-quoted-strings
    - include: single-quoted-strings
    - include: numbers
    - include: variables

###[ COMMENTS ]###############################################################

  comments:
    - match: \###(?!#)
      scope: punctuation.definition.comment.coffee
      push: block-comment-body
    - match: \#(?!{)
      scope: punctuation.definition.comment.coffee
      push: line-comment-body

  block-comment-body:
    - meta_scope: comment.block.coffee
    - match: \###(?!#)
      scope: punctuation.definition.comment.coffee
      pop: 1
    - match: (@)\w*
      scope: variable.annotation.coffee
      captures:
        1: punctuation.definition.variable.coffee

  line-comment-body:
    - meta_scope: comment.line.number-sign.coffee
    - match: $\n?
      pop: 1

  shebang:
    - meta_include_prototype: false
    - match: ^\#!
      scope: punctuation.definition.comment.coffee
      set: shebang-body
    - match: ^|(?=\S)  # Note: Ensure to highlight shebang if Python is embedded.
      pop: 1

  shebang-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.shebang.coffee
    # Note: Keep sync with first_line_match!
    - match: coffee(?:\d(?:\.\d+)?)?\b
      scope: constant.language.shebang.coffee
    - match: $\n?
      pop: 1

###[ CLASS DECLARATIONS ]#####################################################

  classes:
    - match: class\b
      scope: meta.class.coffee keyword.declaration.class.coffee
      push:
        - class-extends
        - class-name

  class-name:
    - match: (?=extends\b)
      pop: 1
    - match: ({{identifier}})(\.)
      captures:
        1: support.class.coffee
        2: punctuation.accessor.dot.coffee
    - match: '{{identifier}}'
      scope: entity.name.class.coffee
      pop: 1
    - include: comments
    - include: else-pop

  class-extends:
    - meta_content_scope: meta.class.identifier.coffee
    - match: extends\b
      scope: storage.modifier.extends.coffee
      set: class-extends-name
    - include: comments
    - include: else-pop

  class-extends-name:
    - meta_scope: meta.class.extends.coffee
    - match: ({{identifier}})(\.)
      captures:
        1: support.class.coffee
        2: punctuation.accessor.dot.coffee
    - match: '{{identifier}}'
      scope: entity.other.inherited-class.coffee
      pop: 1
    - include: comments
    - include: else-pop

###[ FUNCTION DECLARATIONS ]##################################################

  functions:
    # Show well-known functions from Express and Mocha in Go To Symbol view
    - match: ^\s*(describe|it|app\.(get|post|put|all|del|delete))[^\w]
      push:
        - meta_scope: meta.function.symbols.coffee
        - match: $
          pop: 1
        - include: script
    # anonymous functions
    - match: (?=\()
      branch_point: anonymous
      branch:
        - anonymous-parameter-list
        - group
    # named functions
    - match: (?=(?:(?!and=|or=)|@){{identifier}}\s*[:=][^>])
      branch_point: function
      branch:
        - function-name
        - variable
    - match: '[=-]>'
      scope: keyword.declaration.function.coffee

  anonymous-parameter-list:
    - match: \(
      scope: punctuation.section.parameters.begin.coffee
      set:
        - anonymous-body
        - function-parameter-list-body
    - include: comments
    - include: else-pop

  anonymous-body:
    - meta_content_scope: meta.function.coffee
    - match: '[=-]>'
      scope: meta.function.coffee keyword.declaration.function.coffee
      pop: 1
    - match: (?=\S)
      fail: anonymous

  group:
    - match: \(
      scope: punctuation.section.group.begin.coffee
      pop: 1

  function-name:
    - meta_include_prototype: false
    - meta_scope: meta.function.identifier.coffee
    - match: (@?){{identifier}}
      scope: entity.name.function.coffee
      captures:
        1: punctuation.definition.variable.coffee
      set:
        - function-body
        - function-parameter-list
        - function-assignment
    - match: (?=\S)
      fail: function

  function-assignment:
    - meta_include_prototype: false
    - match: '[:=](?!>)'
      scope: keyword.operator.assignment.coffee
      pop: 1
    - include: else-pop

  function-parameter-list:
    - match: \(
      scope: punctuation.section.parameters.begin.coffee
      set: function-parameter-list-body
    - include: comments
    - include: else-pop

  function-parameter-list-body:
    - clear_scopes: 1
    - meta_scope: meta.function.parameters.coffee
    - match: \)
      scope: punctuation.section.parameters.end.coffee
      pop: 1
    - match: '[:=]'
      scope: keyword.operator.assignment.coffee
      push: parameter-value
    - match: \.{2,3}
      scope: keyword.operator.variadic.coffee
    - match: '{{identifier}}'
      scope: variable.parameter.coffee
    - include: comma-separators
    - include: comments

  parameter-value:
    - match: (?=[,)])
      pop: 1
    - include: expressions

  function-body:
    - meta_content_scope: meta.function.coffee
    - match: '[=-]>'
      scope: meta.function.coffee keyword.declaration.function.coffee
      pop: 1
    - match: (?=\S)
      fail: function

###[ FUNCTION CALLS ]#########################################################

  function-calls:
    - match: |-
        (?x)
        ( decodeURI(?: Component)? | encodeURI(?: Component)? | eval
        | parse(?: Float | Int ) | require )\b
      scope: support.function.coffee
    - match: |-
        (?x)
        (console)
        (?:
        (\.)
        ( assert | debug | dir | error | info | log | time | timeEnd | warn )\b
        )?
      scope: meta.path.coffee
      captures:
        1: variable.language.console.coffee
        2: punctuation.accessor.dot.coffee
        3: support.function.console.coffee
    - match: |-
        (?x)
        (\.)
        ( apply | call | concat | every | filter | forEach | from | hasOwnProperty
        | indexOf | isPrototypeOf | join | lastIndexOf | map | of | pop
        | propertyIsEnumerable | push | reduce(?:Right)? | reverse | shift | slice
        | some | sort | splice | to(?:Locale)?String | unshift | valueOf )\b
      scope: meta.path.coffee
      captures:
        1: punctuation.accessor.dot.coffee
        2: support.function.method.array.coffee
    - match: |-
        (?x)
        (Array)
        (?:
        (\.)
        ( isArray )\b
        )?
      scope: meta.path.coffee
      captures:
        1: support.class.coffee
        2: punctuation.accessor.dot.coffee
        3: support.function.static.array.coffee
    - match: |-
        (?x)
        (Object)
        (?:
        (\.)
        ( create | definePropert(?: ies | y ) | freeze | getOwnProperty(?: Descriptors? | Names )
        | getProperty(Descriptor | Names) | getPrototypeOf | is(?: Extensible | Frozen | Sealed)?
        | isnt | keys | preventExtensions | seal )\b
        )?
      scope: meta.path.coffee
      captures:
        1: support.class.coffee
        2: punctuation.accessor.dot.coffee
        3: support.function.static.object.coffee
    - match: |-
        (?x)
        (Math)
        (\.)
        (?:
        ( abs | acos | acosh | asin | asinh | atan | atan2 | atanh | ceil | cos
        | cosh | exp | expm1 | floor | hypot | log | log10 | log1p | log2 | max
        | min | pow | random | round | sign | sin | sinh | sqrt | tan | tanh
        | trunc )\b
        )?
      scope: meta.path.coffee
      captures:
        1: support.class.coffee
        2: punctuation.accessor.dot.coffee
        3: support.function.static.math.coffee
    - match: |-
        (?x)
        (Number)
        (?:
        (\.)
        ( is(?: Finite | Integer | NaN ) | toInteger )\b
        )?
      scope: meta.path.coffee
      captures:
        1: support.class.coffee
        2: punctuation.accessor.dot.coffee
        3: support.function.static.number.coffee
    # other classes
    - match: |-
        (?x)
        \b( ArrayBuffer | Blob | Boolean | Date | document | event
        | Float(?: 32 | 64)Array | Function | Int(?: 8 | 16 | 32 | 64)Array
        | Map | Proxy | RegExp | Set | String | WeakMap | window
        | Uint(?: 8 | 16 | 32 | 64)Array | XMLHttpRequest | Symbol )\b
      scope: support.class.coffee
    # user function calls
    - match: (@?){{identifier}}(?=\()
      scope: meta.function-call.identifier.coffee variable.function.coffee
      captures:
        1: punctuation.definition.variable.coffee
      push: function-call-argument-list

  function-call-argument-list:
    - match: \(
      scope: punctuation.section.group.begin.coffee
      set: function-call-argument-list-body

  function-call-argument-list-body:
    - meta_scope: meta.function-call.arguments.coffee
    - match: \)
      scope: punctuation.section.group.end.coffee
      pop: 1
    - include: script

###[ KEYWORDS ]###############################################################

  keywords:
    # export/import
    - match: export\b
      scope: keyword.control.export.coffee
    - match: (?:import|from)\b
      scope: keyword.control.import.coffee
    # excpetion
    - match: (?:catch|finally|try)\b
      scope: keyword.control.exception.coffee
    # conditional
    - match: if\b
      scope: keyword.control.conditional.if.coffee
    - match: else\b
      scope: keyword.control.conditional.else.coffee
    - match: switch\b
      scope: keyword.control.conditional.switch.coffee
    - match: then\b
      scope: keyword.control.conditional.then.coffee
    - match: unless\b
      scope: keyword.control.conditional.unless.coffee
    - match: when\b
      scope: keyword.control.conditional.when.coffee
    # loop
    - match: by\b
      scope: keyword.control.loop.by.coffee
    - match: do\b
      scope: keyword.control.loop.do.coffee
    - match: for(?:\s+own)?\b
      scope: keyword.control.loop.for.coffee
    - match: loop\b
      scope: keyword.control.loop.loopcoffee
    - match: until\b
      scope: keyword.control.loop.until.coffee
    - match: while\b
      scope: keyword.control.loop.while.coffee
    # flow
    - match: (?:await|break|continue|return|throw|yield(?:\s+from)?)\b
      scope: keyword.control.flow.coffee
    # other
    - match: (?:debugger\b|\\)
      scope: keyword.other.coffee

  operators:
    # symbolic
    - match: (?:and|or|<<|>>>?|[-+*/%&|^])=
      scope: keyword.operator.assignment.augmented.coffee
    - match: \+\+?|\-\-?|\*\*?|//?|%%?
      scope: keyword.operator.arithmetic.coffee
    - match: '[=!]==?|[<>]=?'
      scope: keyword.operator.comparison.coffee
    - match: '&&|\|\||[!?]'
      scope: keyword.operator.logical.coffee
    - match: '[&|^~]'
      scope: keyword.operator.bitwise.coffee
    - match: '[:=](?!>)'
      scope: keyword.operator.assignment.coffee
    - match: \.{2,3}
      scope: keyword.operator.variadic.coffee
    # alphanumeric
    - match: (?:as)\b
      scope: keyword.operator.word.coffee keyword.operator.assignment.as.coffee
    - match: (?:in|of)\b
      scope: keyword.operator.word.coffee keyword.operator.iterator.coffee
    - match: (?:and|or|is|isnt|not)\b
      scope: keyword.operator.word.coffee keyword.operator.logical.coffee
    - match: (?:new)\b
      scope: keyword.operator.word.coffee keyword.operator.object.new.coffee
      push: maybe-class
    - match: (?:delete)\b
      scope: keyword.operator.word.coffee keyword.operator.object.delete.coffee
    - match: (?:super)\b
      scope: keyword.operator.word.coffee keyword.operator.object.super.coffee
    - match: (?:instanceof|typeof)\b
      scope: keyword.operator.word.coffee keyword.operator.comparison.type.coffee
      push: maybe-class

  maybe-class:
    - match: ({{identifier}})?(\.)
      captures:
        1: support.class.coffee
        2: punctuation.accessor.dot.coffee
    - match: '{{identifier}}'
      scope: support.class.coffee
      set: maybe-class-arguments
    - include: else-pop

  maybe-class-arguments:
    - match: \(
      scope: punctuation.section.group.begin.coffee
      set: class-arguments-body
    - include: else-pop

  class-arguments-body:
    - meta_scope: meta.group.coffee
    - match: \)
      scope: punctuation.section.group.end.coffee
      pop: 1
    - include: script

###[ OPERATORS ]##############################################################

  punctuations:
    - include: comma-separators
    - match: \;
      scope: punctuation.terminator.statement.coffee
    - match: \{
      scope: punctuation.section.block.begin.coffee
    - match: \}
      scope: punctuation.section.block.end.coffee
    - match: \(
      scope: punctuation.section.group.begin.coffee
    - match: \)
      scope: punctuation.section.group.end.coffee
    - match: \[
      scope: punctuation.section.brackets.begin.coffee
    - match: \]
      scope: punctuation.section.brackets.end.coffee

  comma-separators:
    - match: \,
      scope: punctuation.separator.sequence.coffee

###[ REGULAR EXPRESSIONS ]#####################################################

  patterns:
    - match: /{3}
      scope: punctuation.definition.string.begin.coffee
      push: heredoc-pattern-body
    - match: (/)((?![\s=/*+{}?])(?:\\.|.)*?)(/)([igmy]{0,4}(?![a-zA-Z0-9]))
      scope: meta.string.regexp.coffee
      captures:
        1: punctuation.definition.string.begin.coffee
        2: string.regexp.coffee
        3: punctuation.definition.string.end.coffee
        4: constant.language.flags.coffee

  heredoc-pattern-body:
    - meta_scope: meta.string.heredoc.coffee
    - meta_content_scope: string.regexp.coffee
    - match: (/{3})([imgy]{0,4})
      captures:
        1: punctuation.definition.string.end.coffee
        2: constant.language.flags.coffee
      pop: 1
    - include: comments
    - include: string-escapes
    - include: string-interpolations

###[ LITERALS ]################################################################

  constants:
    - match: (?:Infinity|NaN|undefined)\b
      scope: constant.language.coffee
    - match: (?:true|on|yes)(?!\s*[:=])\b
      scope: constant.language.boolean.true.coffee
    - match: (?:false|off|no)(?!\s*[:=])\b
      scope: constant.language.boolean.false.coffee
    - match: null(?!\s*[:=])\b
      scope: constant.language.null.coffee

  numbers:
    - match: (0b)({{bin_digit}}+)\b
      scope: meta.number.integer.binary.coffee
      captures:
         1: constant.numeric.base.coffee
         2: constant.numeric.value.coffee
    - match: (0o)({{oct_digit}}+)\b
      scope: meta.number.integer.octal.coffee
      captures:
         1: constant.numeric.base.coffee
         2: constant.numeric.value.coffee
    - match: (0x)({{hex_digit}}+)\b
      scope: meta.number.integer.hexadecimal.coffee
      captures:
         1: constant.numeric.base.coffee
         2: constant.numeric.value.coffee
    # floats
    - match: |-
        (?x:
          # 1., 1.1, 1.1e1, 1.1e-1, 1.e1, 1.e-1 | 1e1, 1e-1
          {{dec_integer}} (?: (\.) {{dec_digit}}* (?:{{dec_exponent}})? | {{dec_exponent}} )
          # .1, .1e1, .1e-1
          | (\.) {{dec_digit}}+ (?:{{dec_exponent}})?
        )\b
      scope: meta.number.float.decimal.coffee constant.numeric.value.coffee
      captures:
        1: punctuation.separator.decimal.coffee
        2: punctuation.separator.decimal.coffee
    - match: '{{dec_integer}}\b'
      scope: meta.number.integer.decimal.coffee constant.numeric.value.coffee

  triple-double-quoted-strings:
    - match: \"{3}
      scope: punctuation.definition.string.begin.coffee
      push: triple-double-quoted-string-body

  triple-double-quoted-string-body:
    - meta_scope: meta.string.heredoc.coffee string.quoted.double.coffee
    - match: \"{3}
      scope: punctuation.definition.string.end.coffee
      pop: 1
    - match: \\.
      scope: constant.character.escape.coffee
    - include: string-interpolations

  triple-single-quoted-strings:
    - match: \'{3}
      scope: punctuation.definition.string.begin.coffee
      push: triple-single-quoted-string-body

  triple-single-quoted-string-body:
    - meta_scope: meta.string.heredoc.coffee string.quoted.single.coffee
    - match: \'{3}
      scope: punctuation.definition.string.end.coffee
      pop: 1

  backtick-quoted-strings:
    - match: \`{3}
      scope: meta.string.heredoc.coffee string.quoted.script.coffee punctuation.definition.string.begin.coffee
      embed: scope:source.jsx
      embed_scope: meta.string.heredoc.coffee meta.embedded.coffee source.jsx.embedded.coffee
      escape: '{{no_escape_behind}}`{3}'
      escape_captures:
        0: meta.string.heredoc.coffee string.quoted.script.coffee punctuation.definition.string.end.coffee
    - match: \`
      scope: meta.string.coffee string.quoted.script.coffee punctuation.definition.string.begin.coffee
      embed: scope:source.jsx
      embed_scope: meta.string.coffee meta.embedded.coffee source.jsx.embedded.coffee
      escape: '{{no_escape_behind}}`'
      escape_captures:
        0: meta.string.coffee string.quoted.script.coffee punctuation.definition.string.end.coffee

  double-quoted-strings:
    - match: \"
      scope: punctuation.definition.string.begin.coffee
      push: double-quoted-string-body

  double-quoted-string-body:
    - meta_scope: meta.string.coffee string.quoted.double.coffee
    - match: \"
      scope: punctuation.definition.string.end.coffee
      pop: 1
    - include: string-escapes
    - include: string-interpolations

  single-quoted-strings:
    - match: \'
      scope: punctuation.definition.string.begin.coffee
      push: single-quoted-string-body

  single-quoted-string-body:
    - meta_scope: meta.string.coffee string.quoted.single.coffee
    - match: \'
      scope: punctuation.definition.string.end.coffee
      pop: 1
    - include: string-escapes

  string-escapes:
    - match: \\(?:x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)
      scope: constant.character.escape.coffee

  string-interpolations:
    - match: \#\{
      scope: punctuation.section.embedded.coffee
      push: string-interpolation-body
    - match: <%
      scope: punctuation.section.embedded.coffee
      push: string-embedded-body

  string-interpolation-body:
    - clear_scopes: 1
    - meta_scope: meta.embedded.coffee source.coffee.embedded.source
    - match: \}
      scope: punctuation.section.embedded.coffee
      pop: 1
    - include: script

  string-embedded-body:
    - clear_scopes: 1
    - meta_scope: meta.embedded.coffee source.coffee.embedded.source
    - match: '%>'
      scope: punctuation.section.embedded.coffee
      pop: 1
    - include: script

###[ JSX TAGS ]################################################################

  jsx-tags:
    - match: (<)(?:({{component_names}})|({{tag_names}}))(?=\s|/?>)
      captures:
        1: punctuation.definition.tag.begin.coffee
        2: entity.name.tag.component.coffee
        3: entity.name.tag.coffee
      push:
        - jsx-meta
        - jsx-tag-open-body

  jsx-meta:
    - meta_include_prototype: false
    - meta_scope: meta.jsx.coffee
    - include: immediately-pop

  jsx-body:
    - match: (</)(?:({{component_names}})|({{tag_names}}))(?=\s|/?>)
      captures:
        1: punctuation.definition.tag.begin.coffee
        2: entity.name.tag.component.coffee
        3: entity.name.tag.coffee
      set: jsx-tag-close-body
    - match: (<)(?:({{component_names}})|({{tag_names}}))(?=\s|/?>)
      captures:
        1: punctuation.definition.tag.begin.coffee
        2: entity.name.tag.component.coffee
        3: entity.name.tag.coffee
      push: jsx-tag-open-body
    - include: jsx-text-interpolations

  jsx-tag-close-body:
    - meta_include_prototype: false
    - meta_scope: meta.tag.coffee
    - match: /?>
      scope: punctuation.definition.tag.end.coffee
      pop: 1

  jsx-tag-open-body:
    - meta_include_prototype: false
    - meta_scope: meta.tag.coffee
    - match: />
      scope: punctuation.definition.tag.end.coffee
      pop: 1
    - match: \>
      scope: punctuation.definition.tag.end.coffee
      set: jsx-body
    - match: '{{attribute_name_start}}'
      push:
        - jsx-tag-attribute-meta
        - jsx-tag-attribute-assignment
        - jsx-tag-attribute-name

  jsx-tag-attribute-name:
    - meta_scope: entity.other.attribute-name.coffee
    - include: jsx-string-interpolations
    - match: '{{attribute_name_break}}'
      pop: 1
    - match: '["''`<]'
      scope: invalid.illegal.attribute-name.coffee

  jsx-tag-attribute-meta:
    - meta_include_prototype: false
    - meta_scope: meta.attribute-with-value.coffee
    - include: immediately-pop

  jsx-tag-attribute-assignment:
    - meta_include_prototype: false
    - match: =
      scope: punctuation.separator.key-value.coffee
      set: jsx-tag-attribute-value
    - include: else-pop

  jsx-tag-attribute-value:
    - meta_include_prototype: false
    - match: \"
      scope: punctuation.definition.string.begin.coffee
      set: jsx-tag-attribute-value-double-quoted-content
    - match: \'
      scope: punctuation.definition.string.begin.coffee
      set: jsx-tag-attribute-value-single-quoted-content
    - match: '{{unquoted_attribute_start}}'
      set: jsx-tag-attribute-value-unquoted-content
    - include: else-pop

  jsx-tag-attribute-value-double-quoted-content:
    # See the top of this file for why prototype is excluded
    - meta_include_prototype: false
    - meta_scope: meta.string.coffee string.quoted.double.coffee
    - match: \"
      scope: punctuation.definition.string.end.coffee
      pop: 1
    - include: jsx-string-interpolations

  jsx-tag-attribute-value-single-quoted-content:
    # See the top of this file for why prototype is excluded
    - meta_include_prototype: false
    - meta_scope: meta.string.coffee string.quoted.single.coffee
    - match: \'
      scope: punctuation.definition.string.end.coffee
      pop: 1
    - include: jsx-string-interpolations

  jsx-tag-attribute-value-unquoted-content:
    # See the top of this file for why prototype is excluded
    - meta_include_prototype: false
    - meta_content_scope: meta.string.coffee string.unquoted.coffee
    - include: jsx-string-interpolations
    - match: '{{unquoted_attribute_break}}'
      pop: 1
    - match: '["''`<]'
      scope: invalid.illegal.attribute-value.coffee

  jsx-string-interpolations:
    - match: \{#
      scope: punctuation.definition.comment.begin.coffee
      push: jsx-string-comment-body
    - match: \{
      scope: punctuation.section.interpolation.begin.coffee
      push: jsx-string-interpolation-body

  jsx-string-comment-body:
    # required to support "toggle_comment"
    - clear_scopes: 1
    - meta_scope: meta.interpolation.coffee comment.block.coffee
    - include: jsx-text-comment-body

  jsx-string-interpolation-body:
    - clear_scopes: 1
    - meta_scope: meta.interpolation.coffee
    - meta_content_scope: source.coffee.embedded.jsx
    - include: jsx-text-interpolation-body

  jsx-text-interpolations:
    - match: \{#
      scope: punctuation.definition.comment.begin.coffee
      push: jsx-text-comment-body
    - match: \{
      scope: punctuation.section.interpolation.begin.coffee
      push: jsx-text-interpolation-body

  jsx-text-comment-body:
    # required to support "toggle_comment"
    - meta_scope: meta.interpolation.coffee comment.block.coffee
    - match: \}
      scope: punctuation.definition.comment.end.coffee
      pop: 1

  jsx-text-interpolation-body:
    - meta_scope: meta.interpolation.coffee
    - meta_content_scope: source.coffee.embedded.jsx
    - match: \}
      scope: punctuation.section.interpolation.end.coffee
      pop: 1
    - match: \#
      scope: punctuation.definition.comment.coffee
      push: jsx-line-comment-body
    - include: script

  jsx-line-comment-body:
    - meta_scope: comment.line.number-sign.coffee
    - match: $\n?|(?=})
      pop: 1

###[ VARIABLES ]##############################################################

  variables:
    - match: (?:this|extends)(?!\s*[:=])\b
      scope: variable.language.coffee
    - match: ({{identifier}})?(\.)
      captures:
        1: variable.other.object.coffee
        2: punctuation.accessor.dot.coffee
      push: member
    - match: (@)(?:{{identifier}})?
      scope: variable.other.member.coffee
      captures:
        1: punctuation.definition.variable.coffee
    - match: '{{identifier}}'
      scope: variable.other.readwrite.coffee

  variable:
    - match: (?:this|extends)(?!\s*[:=])\b
      scope: variable.language.coffee
      pop: 1
    - match: ({{identifier}})?(\.)
      captures:
        1: variable.other.object.coffee
        2: punctuation.accessor.dot.coffee
      set: member
    - match: (@)(?:{{identifier}})?
      scope: variable.other.member.coffee
      captures:
        1: punctuation.definition.variable.coffee
      pop: 1
    - match: '{{identifier}}'
      scope: variable.other.readwrite.coffee
      pop: 1

  member:
    - meta_scope: meta.path.coffee
    # member objects
    - match: ({{identifier}})(\.)
      captures:
        1: variable.other.object.coffee
        2: punctuation.accessor.dot.coffee
    # method
    - match: '{{identifier}}(?=\()'
      scope: meta.function-call.identifier.coffee variable.function.coffee
      set: function-call-argument-list
    # member function definition or variable
    - match: (?=(?:(?!and=|or=)|@){{identifier}})
      branch_point: member
      branch:
        - member-function
        - member-variable
      pop: 1

  member-function:
    - meta_include_prototype: false
    - meta_scope: meta.function.identifier.coffee meta.path.coffee
    - match: (@?){{identifier}}
      scope: entity.name.function.coffee
      captures:
        1: punctuation.definition.variable.coffee
      set:
        - member-function-body
        - function-parameter-list
        - function-assignment
    - match: ''
      fail: member

  member-function-body:
    - meta_content_scope: meta.function.coffee
    - match: '[=-]>'
      scope: meta.function.coffee keyword.declaration.function.coffee
      pop: 1
    - match: (?=\S)
      fail: member

  member-variable:
    - match: '{{identifier}}'
      scope: meta.path.coffee variable.other.member.coffee
      pop: 1
    - include: immediately-pop

###[ PROTOTYPES ]##############################################################

  else-pop:
    - match: (?=\S)
      pop: 1

  immediately-pop:
    - match: ''
      pop: 1

###############################################################################


variables:

  ascii_space: '\t\n\f '

  # A lookbehind used in embed..escape patterns, to check for unescaped characters
  # in embed...escape statements.
  no_escape_behind: (?<![^\\]\\)(?<![\\]{3})

  bin_digit: '[01_]'
  oct_digit: '[0-7_]'
  dec_digit: '[0-9_]'
  hex_digit: '[\h_]'
  dec_integer: (?:0|[1-9]{{dec_digit}}*)
  dec_exponent: '[Ee](?:[-+]|(?![-+])){{dec_digit}}*'

  identifier: '[[:alpha:]_$]\w*'

  component_names: '[A-Z][[:alnum:]_.-]*'
  tag_names: '[[:alpha:]][[:alnum:]_.-]*'

  # https://html.spec.whatwg.org/multipage/syntax.coffee#attributes-2
  attribute_name_break_char: '[{{ascii_space}}=/>]'
  attribute_name_break: (?={{attribute_name_break_char}})
  attribute_name_start: (?=[^{{attribute_name_break_char}}])

  # https://html.spec.whatwg.org/multipage/syntax.coffee#syntax-attribute-value
  unquoted_attribute_break: (?=[{{ascii_space}}]|/?>)
  unquoted_attribute_start: (?=[^{{ascii_space}}=>])
